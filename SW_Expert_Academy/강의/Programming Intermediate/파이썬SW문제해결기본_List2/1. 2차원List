List초기화
    arr = [0,0,0,0,0]
    arr = [0]*5
    arr = [i for i in range(2,9) if i % 2 == 0] #[2,4,6,8]
    sequence자료형에 모두 적용 가능.

    2차원도 마찬가지로 초기화 가능

2차원 List 입력받기
    첫쨰줄 행n 열 m을 입력 받기
    둘째줄부터 n*m의 행열 데이터가 주어질 경우
    ex1)
        n,m = map(int, input().split()
        mylist = [0 for i in range(n)] 
            또는 mylist = [0] * n
        for i in range(n):
            mylist[i] = list(map(int,input().split()))
    ex2)
        n,m = map(int, input().split()
        mylist = []
        for i in range(n):
            mylist.append(list(map(int,input().split())))
    ex3)
        n,m = map(int,input().split())
        mylist = [list(map(int,input().split())) for i in range(n)]

2차원 list에서 원하는 데이터의 위치 찾기
    ex1)
        n,m = map(int, input().split()
        newlist = []
        mylist = [0 for i in range(n)] 
        for i in range(n):
            mylist[i] = list(map(int,input().split()))
            for j in range(m):
                if mylist[i][j] ==1:
                    newlist.append([i,j])

        n,m = map(int, input().split()
        mylist = [list(map(int,input().split())) for _ in rnage] 
        newlist = [(i,j) for i in range(n) for j in range(m) if mylist[i,j] ==1])

List 순회: n행 m열의 list의 n*m개의 모든 원소를 빠짐없이 조사하는 방법
    행우선순회
        List행을 우선으로 list의 원소를 조사
        #i 행의좌표, n = len(arr)
        #j 열의좌표, m = len(arr[0])
        for i in range(len(arr)):
            for j in range(len(arr[0])):
                arr[i][j] #필요한 연산 수행
    열우선순회
        List열을 우선으로 list의 원소를 조사
        #i 행의좌표, n = len(arr)
        #j 열의좌표, m = len(arr[0])
        for j in range(len(arr[0])):
            for i in range(len(arr)):
                arr[i][j] #필요한 연산 수행
    지그재그순회
        list의 행을 좌우로 조사하는 방법 첫행은 우측, 차행은 좌측으로 진행
        #i 행의좌표, n = len(arr)
        #j 열의좌표, m = len(arr[0])
        for i in range(len(arr)):
            for j in range(len(arr[0])):
                arr[i][j + (m-1-2*j)*(i%2)] #필요한 연산 수행
델타를 이용한 2차 list 탐색
    2차 list의 한 좌표에서 네 방향의 인접 list 요소를 탐색할 때 사용하는 방법
    델타 값은 한 좌표에서 네 방향의 좌표와 x,y차이를 저장한 list로 구현
    델타 값을 이용하여 특정 원소의 상하좌우에 위치한 원소에 접근할 수 있음
    2차원 list의 가장자리 원소들은 상하좌우 네 방향에 원소가 존재하지 않을 수 있는 경우 있을 수 있음에 유의!

    ex)
        #arr[0....n-1][0....n-1].... : 2차원 list
        dx = [0,0,-1,1] 
        dy = [-1,1,0,0,] #dx와 dy의 각 리스트의 같은 자리값을 모아 좌표를 만들면 원좌표와 상하좌우 좌표간의 차이
        
        for x in range(len(arr)):
            for y in range(len(arr[x])):
                for i in range(4):
                    testX = x +dx[i]
                    testY = y +dy[i]
                    print(arr[testX][testY]) #순서대로 상하좌우의 원소를 출력함

2차원 list활용 1_ 전치행렬
    전치행렬: 행과 열의 값이 반대인 행렬
    행의 값과 열의 값이 같은 선(대각선)을 기준으로 하여 한 쪽의 원소들을 자리바꿈해줌
    --> 모든 좌표에 대해서 바꿀시, 본래의 리스트로 돌아올 수 있음에 유의
    ex)
        #i 행의 좌표, len(arr)
        #j 열의 좌표, len(arr[0])
        arr = [[1,2,3,],[4,5,6,],[7,8,9]]  # 3*3행렬
        
        for i in range(3):
            for j in range(3):
                if i < j:
                    arr[i][j],arr[j][i] = arr[j][i],arr[i][j]
    zip 파이썬의 내장함수
        zip함수: 동일한 개수로 이루어진 자료형들을 묶어 주는 역할을 하는 함수
        ex)
            a = ['a','b','c',]
            b = [1,2,3,]
            zip(a,b) ===> {('a',1),('b',2),('c',3)}
            print(list(zip(a,b))) # [('a',1),('b',2),('c',3)]

        ex)
            arr = [[1,2,3],[4,5,6],[7,8,9]]
            print(list(zip(*arr))) # [(1,4,7),(2,5,8),(3,6,9)]