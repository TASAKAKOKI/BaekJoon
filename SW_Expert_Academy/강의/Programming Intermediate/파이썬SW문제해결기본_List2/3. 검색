검색
    - 저장되어 있는 자료 중에서 "원하는 항목(목적하는 탐색키를 가진 항목"을 찾는 작업
    - 검색의 종류 : 순차 검색, 이진 검색, 인덱싱

순차 검색
    - 일렬로 되어 있는 자료를 순서대로 검색하는 방법
    - list나 연결list 등 순자구조로 구현된 자료구조에서 유용함
    - 구현이 쉽지만, 검색 대상이 많은경우 수행시간의 증가로 비효율적
    - 2가지 경우- 정렬된 경우 와 정렬되지 않은 경우가 있음

순차검색: 정렬되지 않은 자료의 검색 과정
    - 첫번째 원소부터 순서대로 검색대상과 키 값이 같은 원소가 있는지를 비교하여 찾음
    - 키 값이 동일한 원소를 찾으면 그 원소의 인덱스를 반환
    - 자료구조의 마지막에 갈 때까지 검색 대상을 찾지 못하면 검색 실패
    순차 검색의 평균 비교 횟수:
        1/n*(1+2+3+...+n) = (n+1)/2
    시간복잡도 :O(n)
    def sequentialSearch1 (a,n,key):
            i = 0
            whil i < n and a[i] != key:
                i +=1
            if i < n: return i
            else: return -1

순차검색: 정렬되지 않은 자료의 검색 과정
    - 자료가 오름차순으로 정렬된 상태에서 검색실시  가정
    - 자료를 순차적으로 검색하면서 키 값을 비교
    - 원소의 키 값이 검색 대상의 키 값보다 크면 원소가 없다는 것이므로 더이상 검색하지 않고 검색을 종료
    - 정렬되어 있으므로, 검색 실패를 반환하는 경우 평균 비교 횟수가 반으로 줄어듦
    시간 복잡도: O(n)
    ex)
        def sequentialSearch2 (a,n,key):
            i = 0
            whil i < n and a[i] < key:
                i +=1
            if i < n and a[i] == key: return i
            else: return -1

이진 검색
    - 선행조건: 자료가 정렬된 상태여야 한다.
    - 효율적인 검색
    - 자료의 가운데 항목의 키 값과 비교하여 다음 검색의 위치를 결정하고 검색을 계속 진행
        목적 키를 찾을 때까지 이진 검색을 순환적으로 반복 수행함으로써 검색 범위를 반으로 줄여나감으로써 빠르게 검색 수행 
    - 정렬된 데이터 n개가 있는 경우의 시간 복잡도
        순차 검색시 : O(n) 이진 검색시 : O(log n)
    
이진 검색의 과정
    - 자료의 중앙에 있는 원소 선택
    - 중앙 원소의 값과 찾고자 하는 목표 값을 비교
    - 목표값 < 중앙 원소 값 : 자료의 왼쪽 반에 대해서 새로 검색 수행
      목표값 > 중앙 원소 값 : 자료의 오른쪽 반에 대해서 새로 검색 수행
    -찾고자 하는 값을 찾을 때 까지 반복

이진 검색의 구현
    - 검색 범위의 시작점과 종료점을 이용하여 검색을 반복 수행함
    - 이진 검색의 경우, 자료에 삽입이나 삭제가 발생하였을 때, List의 상태를 항상 정렬 상태로
      유지하는 추가 작업이 필요함

    ex)
        def binarySearch(a, key):
            start = 0;
            end =   len(a) -1;
            while start <= end:
                middle = start + (end-start) // 2
                if key == a[middle]: #검색 성공
                    return True
                elif key < a[middle]:
                    end = middle - 1
                else:
                    start = middle +1:
            return False #검색 실패

    ex) 재귀함수를 이용한  이진 검색 구현
        def binarySearch2 (a,low,high,key):
            if low>high: #검색 실패
                return False
            else:
                middle = (low+high)/22
                if key == a[middle]: #검색 성공
                    return True
                elif key < a[middle]:
                    return binarySearch2(a,low,middle-1,key)
                elif key > a[middle]:
                    return binarySearch2(a,middle+1,high,key)

인덱스 :
    - 데이터베이스에서 유래, 테이블에 대한 동작 속도를 높임
    - 룩 업 테이블 등의 용어로 사용함
    - 인덱스를 저장하는데 필요한 디스크 공간은 보통 테이블 저장에 필요한 디스크 공간보다 작음
        인덳스는 키-필드만 갖고 있고, 테이블의 다른 세부 항목은 갖고 있지 않음
    - list를  사용한 인덱스
    - 대량의 데이터를 매번 정렬하면, 프로그램의 반응은 느려질 수 밖에 없음
      이러한 대량 데이터의 성능 저하 문제를 해결하기 위해 list인덱스를 사용할 수 있음

     