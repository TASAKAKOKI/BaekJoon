이진탐색트리의 특징
    - 탐색작업을 효율적으로 하기 위한 자료구조
    - 모든 원소는 서로 다른 유일한 키를 가짐
    - key(왼쪽서브트리) < key(루트노드) < key(오른쪽 서브트리)
    - 왼쪽 서브트리와 오른쪽 서브트리도 이진탐색 트리임
    - 이진탐색트리를 중위 순회하면 오름차순으로 정렬된 값을 얻을 수 있음

이진탐색트리의 연산
    <탐색연산>
        - 루트에서 시작
        - 탐색할 키값x를 루트 노드의 값과 비교
        1. 키값x == 루트 노드의 키값일 경우,
            - 원하는 원소를 찾았으므로 탐색 연산 성공
        2. 키값x < 루트 노드의 키값인 경우,
            - 루트 노드의 왼쪽 서브트리에 대해서 탐색연산 진행
        3/ 키값x > 루트 노드의 키값인 경우,
            - 루트 노드의 오른쪽 서브트리에 대해서 탐색연산 진행
        - 서브트리에 대해서 순환적으로 탐색연산을 반복
    <삽입연산>
        - 먼저 탐색연산을 수행
            - 삽입할 원소가 같은 원소가 트리에 있으면 삽입할 수 없으므로, 같은 원소가 트리에 있느지 탐색하여 확인
            - 탐색에서 탐색 실패가 결정되는 위치가 삽입 위치가 됨
이진탐색트리의 성능
    - 탐색(Searching),삽입(Insertion), 삭제(deletion) 시간은 트리의 높이에 좌우됨
        O(h), h: BST의깊이(height)
    - 평균의 경우
        이진트리가 균형적으로 생성되어 있는 경우
        O(log n)
    - 최악의 경우
        한쪽으로 치우친 경사 이진 트리의경우
        O(n)
        순차탐색과 시간복잡도가 같음

    검색알고리즘의 비교
        - 리스트에서의 순차 검색: O(n)
        - 정렬된 리스트에서의 순차 검색: O(n)
        - 정렬된 리스트에서의 이진 검색: O(log n)
        - 이진 탐색 트리에서의 평균: O(log n)
            - 최악의 경우: O(n)
            - 완전 이진 트리 또는 균형 트리로 바꿀 수 있다면 최악의 경우를 없앨 수 있음
                -> 새로운 원소를 삽입할 때 삽입 시간을 줄임
                -> 평균과 최악의 시간이 같아짐: O(log n)
        - 해쉬 검색: O(1)
            - 데이터를 저장할 추가 저장공간이 필요