문자표현
    컴퓨터에서의 문자표현:
    ex) - 글자 A를 메모리에 저장하는 방법
        메모리는 숫자만을 저장할 수 있기 떄문에 A라는 글자의 모양 그대로 비트맵으로 저장하는 방법을 사용하지 않는 한, 각 문자에 대해서 대응되는 숫자를 정해놓고 이것을 메모리에 저장하는 방법이 있음.
        - 코드체계
        영어가 대소문자 합쳐서 52개이므로6(64가지)비트면 모두 표현할 수 있음
        000000 => 'a' , 000001 => 'b'
    - 네트워크가 발전되기 전 미국의 각 지역별로 코드체계를 따로 정해서 사용했지만, 인터넷(네트워크)가 발전하면서 서로 간의 정보를 주고 받을 때 정보를 달리 해석하게 되는 문제가 발생.
    따라서, 혼동을 피하기 위해 표준화를 제정(1967년)ㅣ ASCII(american standard code for information interchange)

    ASCII:
        - 문자 인코딩 표준
        - 7bit 인코딩으로 128문자를 표현하며 "33개의 출력 불가능한 제어 문자들"과 "공백을 비롯한 95개의 출력 가능한 문자들"로 구성
    확장 ASCII:
        - 표준문자 이외의 악센트 문자, 도형 문자, 특수 문자, 특수 기호 등 "부가적인 문자를 128개 추가 할 수 있게 하는 부호
        - 1byte 내의 8bit를 모두 사용함으로써 추가적인 문자 표현 가능
        - 컴퓨터 생산자와 소프트웨어 개발장에게 할당된 확장 부호는 표준 아스키와 다르게 서로 다른 프로그램이나 컴퓨터 사이에 교환되지 못함
        - 프로그램이나 컴퓨터/프린터가 그것을 해독할 수 있도록 설계되어 있어야만 올바로 해독될 수 있음

    유니코드: 다국어 처리를 위한 표준
        - 대부분의 컴퓨터는 문자를 읽고 쓰는데, 아스키 코드 형식을 사용
        - 컴퓨터가 발전하면서 각 국가들은 자국의 문자를 표현하기 위하여 코드 체계를 만들어서 사용
        - 우리나라도 한글 코드체계를 만들어 사용했고, 조합형, 완성형 두 종류를 가지고 있음
        
        --> 인터넷이 전 세계로 발전하면서 아스키를 만들었을 때와 같은 문제가 국가 간 정보 처리시 발생
        --> 자국의 코드체계를 타 국가가 가지고 있지 않으면 정보를 잘못 해석할 수 밖에 없음
        --> 다국어 처리를 위해 표준을 마련 == 유니코드
    
    Character Set : 유니코드가 다시 세분화 된것.
        UCS-2(Universal Character Set 2)
        UCS-4(Universal Character Set 4)
        - 유니코드를 저장하는 변수의 크기를 정의
        - 파일을 인식 시 이 파일이 UCS-2, UCS-4인지 인식하고
          각 경우를 구분해서 모두 다르게 구현해야 하는 문제 발생
    유니코드 인코딩 :
        - 유니코드 인코딩(UTF: Unicode Transformation Format)
        - UTF-8(in web),MIN : 8bit(1BYTE), Max: 32bit(1BYTE*4)
        - UTF-16(in windows, Java),MIN : 16bit(2BYTE), Max: 32bit(2BYTE*2)
        - UTF-32(in unix),MIN : 32bit(4BYTE), Max: 32bit(4BYTE*1)
    파이썬 인코딩:
        - 2..버전 ASCII  --> #-*-coding: utf-8-*-
        - 3..버전 유니코드 UTF-8 --> 생략가능
        -- 다른 인코딩 방식으로 처리 시 첫 줄에 작성하는 위 항목에 원하는 인코딩 방식을 지정해주면 됨.

문자열의 분류
    문자열의 분류
        문자열
            -Fixed length(고정길이 문자열)
            -Variable length(가변길이 문자열)
                - Length controlled(길이조절 문자열)
                    : 주로 java언어에서의 문자열 형식
                    : 문자열 데이터 맨 앞에 문자열의 길이를 저장하는 형태
                - Delimited(구분자 문자열)
                    : c언어에서 쓰이는 문자열 형식
                    : 문자열 맨 마지막에 사용하여 문자열의 길이 저장
    c언어에서의 문자열 처리
        문자배열에 문자열을 저장할 때는 항상 마지막에 끝을 표시하는 널 문자('\0')을 넣어줘야 함
        ex)
            char ary[] = {'a','b','c','\0'}; 또는 char ary[]='abc';
        문자열 처리에 필요한 연산을 함수 형태로 제공
            strlen(), strpy(), strcmp(),...
    java에서의 문자열 처리
        문자열 데이터를 저장, 처리해주는 클래스를 제공..
        String 클래스를 사용
        ex)
            String str = 'abc'; 또는 String str=new String('abc');
        문자열 처리에 필요한 연산을 연산자, 메쏘드 형태로 제공
        ex)
            +, length(), replace(), split(), substring() 등
            c언어보다 풍부한 연산 제공
    python에서의 문자열 처리
        c나 java에서는 하나의 문자를 표현하는 char타입이 있는 반면,
        파이썬에서는 char타입이 없으며, 한문자나 문자열을 동일한 유형의 데이터로 취급하므로, 텍스트 데이터 취급방법이 통일된다는 장점이 있다.

        문자열 기호:
            ' '
            " "
            ''' '''
            """ """ 
            - raw표현법을 사용할 수 있기에 전체적인 사용방법은 8가지 방법이 존재

            + 연결(concatenation)
                --> 문자열+문자열: 문자열을 이어붙여주는 역할
            * 반복
                --> 문자열 *수 : 수만큼 문자열 반복    
        문자열 처리
            문자열을 시퀀스 자료형으로 분류됨
            시퀀스 자료형에서 사용할 수 있는 인덱싱, 슬라이싱 연산들 사용 가능
            ex)
                replace(), split(),isalpha(),find()
            문자열은 튜플과 같이 요소값을 변경할 수 없음(immutable)
    
    C와 Java의 String처리의 기본적인 차이점
        c:      아스키 코드로 저장
        java:   유니코드(UTF-16, 2byte)로 저장
        python: 유니코드(UTF-8, 1byte)로 저장
        ex) C: char*name="홍길동";
                int count = strlen(name);
                printf("%d",count);
                // 6 출력
            java: String name ='홍길동';
                    System.out.printIn(name.length());
                    // 3 출력
            python: name ="홍길동";
                    print(len(name))
                    // 3 출력
문자열 복사
    문자열 복사 알고리즘
        소스로부터 한 글자씩 읽어서 타깃에 한 글자씩 복사
        문자열의 끝까지 반복 후 타깃에 문자열 끝('\0')을 표시함

    문자열을 역순으로 바꾸는 뒤집기의 경우
        자기 문자열에서 뒤집는 방법과 새로운 빈 문자열을 만들어 소스의 뒤에서부터 읽어서 타깃에 쓰는 방법

        자기 문자열을 이용할 경우는 swap을 위한 임시 변수가 필요하며 반복 수행을 문자열 길의이 반만을 수행해야 함
    
    문자열의 비교
        c : strcmp()
        java: equals()
            문자열 비교에서 == 연산은 메모리 참조가 같은지를 묻는 것
        python: 연산자 및 is연사자 제공
            == 연산자는 내부적으로 특수한 메서드 __eq__()를 호출
         