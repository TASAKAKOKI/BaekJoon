계산기에서 STACK의 활용
    문자열 수식 계산의 일반적 방법
        1. 중위표기법의 수식을 후위표기법으로 변경
            스택이용,
            중위표기법(infix notation): 연산자를 피연산자의 가운데 표기하는 방법
        2. 후위표기법의 수식을 스택을 이용하여 계산
            후위표기법(postfix notation): 연산자를 피연산자 뒤에 표기하는 방법
    step1. 중위표기식의 후위표기식으로 변환 방법1
        1. 수식의 각 연산자에 대해서 우선순위에 따라 괄호를 사용하여 다시 표현
        2. 각 연산자를 그에 대응하는 오른쪽 괄호의 뒤로 이동
        3. 괄호 제거
        ex)
            1. ((A*B) - (C/D))
            2. ((A B) * (C D)/) -
            3. AB*CD/-
        사람이 손으로 처리하기는 쉽지만, 프로그램으로 작성하기에 어려움
        
    --> 중위표기법을 후위표기법으로 변환하는 알고리즘 개발

    step1. 중위표기식의 후위표기식으로 변환 방법2  (stack이용)
        1. 입력 받은 중위표기식에서 토큰을 읽음
        2. 토큰이 피연산자이면 토큰을 출력
        3. 토큰이 연산자(괄호포함)일 경우
            1) 우선순위가 높으면 ->스택에 push
            2) 우선순위가 낮으면 ->연산자의 우선순위가 토큰의 우선순위보다 작을 때까지 스택에서 pop한 후 토큰의 연산자를 push
            3) 만약 top에 연산자가 없는 경우 ->스택에 push
            4) 토큰이 오른쪽 괄호')'일 경우
                스택 top에 왼쪽 괄호'('가 올 때까지 스택에 pop연산을 수행
                pop한 연산자를 출력
                왼쪽 괄호를 만나면 pop그만 하고 출력하지 않음(괄호는 출력하지 않고 제거)
            5) 중위표기식에 더 읽을 것이 없다면, 중지 더 읽을 것이 있다면 1)부터 반복
            6) 스택에 남아있는 연산자를 모두 pop하여 출력
                스택 밖의 왼쪽 괄호'('는 우선 순위가  가장 높으며,
                스택 안의 왼쪽 괄호'('는 우선 순위가 가장 낮음
    step2. 후위표기법의 수식을 스택을 이용하여 계산
        1. 피연산자를 만나면 스택에 push
        2. 연산자를 만나면 필요한 만큼의 피연산자를 스택에서 pop하여 연산하고, 연산결과를 다시 스택에 push
        3. 수식이 끝나면, 마지막으로 스택을 pop하여 출력 

    문자열로 된 수식을 계산 시
        스택을 두번 사용해서 처리했던 연산을
        파이썬에서 제공되는 eval() 내장 함수로 계산할 수 있음

    eval(수식) 
        문자열로 된 수식을 계산함
        올바른 수식이 아닌 경우 syntax error예외 발생