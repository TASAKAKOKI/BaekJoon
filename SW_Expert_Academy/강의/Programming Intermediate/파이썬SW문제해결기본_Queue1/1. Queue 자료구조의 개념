Queue의 특성
    - 삽입, 삭제의 위치가 stack과 같이 제한적인 자료구조
        - 큐 뒤 : 삽입, 큐 앞 : 삭제 가 이루어짐
    - 선입선출구조(FIFO_First In First Out)
        - 큐에 삽입한 순서대로 원소가 저장
        - 가장 먼저 삽입된 원소는 가장 먼저 삭제됨
    - 큐의 예
        - 서비스 대기 행렬, 라인 티켓팅 등
Queue의 구조 및 기본 연산
    - 큐의 선입선출 구조
        -머리: 큐의 가장 앞 (Front)_ 저장된 원소 중 첫 번째 원소
        -꼬리: 큐의 가장 끝 (Rear)_ 저장된 원소 중 마지막 번째 원소
    - 큐의 기본 연산
        -삽입(enQueue)
        -삭제(deQueue)
Queue의 주요 연산
    - enQueue(item): 큐의 뒤쪽(현 rear 다음)에 원소를 삽입하는 연산
    - deQueue(): 큐의 앞쪽(현 front)에서 원소를 삭제하고 반환하는 연산
    - createQueue(): 공백 상태의 큐를 생성하는 연산 
    - isEmpty(): 큐가 공백상태인지를 확인하는 연산
    - isFull(): 큐가 포화상태인지를 확인하는 연산
    - Qpeek(): 큐의 앞쪽(front)에서 원소를 삭제하지 않고 반환만 하는 연산
Queue의 기본 연산 과정
    - 공백 큐 생성: createQueue()/ front,rear가 모두 -1에 위치
    - 원소 a 삽입: enQueue(a)/ front는 -1 a는 Q의 0번 자리에 위치, rear는 0번 자리
    - 원소 b 삽입: enQueue(b)/ b는 Q의 1번 자리에 위치, rear는 1번 자리
    - 원소 반환/삭제: deQueue()/ a를 반환 / front가 a의 자리(0)로 이동
    - 원소 c 삽입: enQueue(c)/ c가 Q의 2번 자리에 위치, rear는 2번 자리
    - 원소 반환/ 삭제: deQueue()/ b를 반환 / front가 b의 자리(1)로 이동
    - 원소 반환/ 삭제: deQueue()/ c를 반환 / front가 c의 자리(2)로 이동 rear와 같은 자리에 위치 ==> Queue는 공백상태임을 의미
Queue의 종류
    - 선형 큐: 간단하고 기본적인 형태, list사용
    - 원형 큐: 선형에서 발전된 형태, list사용
    - 연결 큐: 연결 리스트 형식을 이용
    - 우선순위 큐: 응용된 형태


