125, 205 확인 필요
선형 queue
    - 선형 큐의 특징
        - 1차원 리스트를 이용
            - 큐의 크기 =  리스트의 크기
            - front: 저장된 첫 번째 원소의 인덱스
            - rear: 저장된 마지막 원소의 인덱스
        - 상태 표현
            - 초기상태: front = rear = -1
            - 공백 상태: front = rear
            - 포화 상태: rear = n-1(n:리스트의 크기, n-1:리스트의 마지막 인덱스)
    -선형 큐의 구현
        - createQueue(): 초기 공백 큐 생성
            - 크기가 n인 1차원 리스트 생성
            - front, rear = -1로 초기화
        - enQueue(item): 삽입
            - 마지막 원소 뒤에 새로운 원소를 삽입하기 위해
                - rear++ 하여 새로운 원소를 삽입할 자리 마련
                - 그 인덱스에 해당하는 리스트 원소Q[rear]에 item을 저장
                    def enQueue(item):
                        global rear
                        if isFull(): print('Queue_Full!')
                        else:
                            rear += 1
                            Q[rear] = item
        - deQueue(): 삭제
            - 가장 앞에 있는 원소를 삭제하기 위해
                - front 값을 하나 증가시켜 큐에 남아있는 첫 번째 원소로 이동함
                - 새로운 첫 번째 원소를 리턴함으로써 삭제와 동일한 기능을 함
                    def deQueue():
                        global front
                        if isEmpty(): print('Queue_Empty')
                        else:
                            front += 1
                            return Q[front]
        - isEmpty(), isFull(): 공백상태 및 포화상태 검사
            - 공백상태: front = rear
            - 포화상태: rear = n-1 (n-1: 리스트의 마지막 인덱스)
                def isEmpty():
                    return front == rear
                def isFull():
                    return rear == len(Q)-1
        -Qpeek(): 검색
            - 가장 앞에 있는 원소를 검색하여 반환하는 연산
            - 현재 front의 한자리 뒤(front+1)에 있는 원소, 즉 큐의 첫 번째에 있는 원소를 반환
                def Qpeek():
                    if isEmpty(): print('Queue_Empty')
                    else: return Q[front+1] // front의 값 변경되지 않음에 주의
    - 선형 큐의 문제점
        - 리스트의 크기를 고정
            --> 사용할 큐의 크기만큼을 미리 확보
            --> 메모리의 낭비 발생
            - 삽입, 삭제를 계속할 경우, 리스트의 앞부분에 활용할 수 있는 공간이 있음에도, return = n-1인 상태, 즉, 포화 상태로 인식
            - 더 이상 삽입을 수행할 수 없음
        - 선형 큐의 장점: 삽입, 삭제의 처리속도가 빠름
        - 선형 큐의 단점: 메모리 낭비가 심함
        - 선형 큐의 단점 해결 방법
            1 원형 큐 사용으로 메모리 절악
            2 파이썬의 리스트 특성을 사용한 큐 사용으로 메모리 절약
                - 단점: 삽입, 삭제 시 복사, 데이터 이동시키는 행위로 연산 수행에 많은 시간 소모
            3 단순 연결 리스트로 구현한 큐 사용으로 메모리 동적 확보
            4 큐 라이브러리 사용
원형 queue
    - 1차원 리스트를 사용하되, 논리적으로 리스트의 처음과 끝이 연결되어 원형 형태의 큐를 이룬다고 가정하고 사용
    - 원형 큐의 특징
        - 초기상태: front = rear = 0
        - 인덱스의 순환:
            - front와 rear의 위치가 리스트의 마지막 인덱스인 n-1를 가리킨 후, 논리적 순환을 이루어 리스트의 처음 인덱스인 0으로 이동해야 함
            - 이를 위해 나머지 연산자 %를 사용
        - front 변수
            - 공백 상태와 포화 상태 구분을 쉽게 하기 위해 front가 있는 자리는 사용하지 않고 항상 빈자리로 둠
        - 삽입 위치 및 삭제 위치
                        삽입 위치           삭제 위치
            선형큐   rear = rear + 1        front = front + 1
            원형큐   rear = (rear+1)%n인    front = (front+1)%n 
                // n보다 커질 경우 다시 0부터 시작할 수 있게 해줌 
    -원형 큐의 구현
        - createQueue(): 초기 공백 큐 생성
            - 크기가 n인 1차원 리스트 생성
            - front, rear = 0으로 초기화
        - isEmpty(), isFull(): 공백상태 및 포화상태 검사
            - 공백상태: front = rear
            - 포화상태: 삽입할 rear의 다음 위치((rear+1)%n)가 == 현재 front 위치 일때
                def isEmpty():
                    return front == rear
                def isFull():
                    return (rear+1)%len(cQ) == front
        - enQueue(item): 삽입
            - 마지막 원소 뒤에 새로운 원소를 삽입하기 위해
                - (rear+1)%n 하여 새로운 원소를 삽입할 자리 마련
                - 그 인덱스에 해당하는 리스트 원소 cQ[rear]에 item을 저장
                    def enQueue(item):
                        global rear
                        if isFull(): print('Queue_Full!')
                        else:
                            rear = rear+1)%len(cQ) 
                            cQ[rear] = item
        - deQueue(), delete(): 삭제
            - 가장 앞에 있는 원소를 삭제하기 위해
                - front 값을 조정하여 삭제할 자리를 준비함
                - 새로운 front 원소를 리턴함으로써 삭제와 동일한 기능을 함
                    def deQueue(): (def delete()도 같음)
                        global front
                        if isEmpty(): print('Queue_Empty')
                        else:
                            front = (front+1)%len(cQ)
                            return cQ[front]

                - 파이썬으로 구현한 원형 큐의 삽입 및 삭제 함수
                    def isEmpty():
                        return front == rear
                    def isFull():
                        return (rear+1)%len(cQ) == front
                    def enQueue(item): #원형 큐의 삽입 연산
                        global rear
                        if isFull(): print('Queue_Full!')
                        else:
                            rear = rear+1)%len(cQ) 
                            cQ[rear] = item
                    def deQueue(): #원형 큐의 삭제 연산
                        global front
                        if isEmpty(): print('Queue_Empty')
                        else:
                            front = (front+1)%len(cQ)
                            return cQ[front] # 리턴만 하면, 실제로 그 값을 pop(front)하거나, delete한 것이 아닌데, 원소가 삭제 되는가?
                    
                    ## 본문
                    cQ_SIZE = 3
                    cQ = [0]*cQ_SIZE
                
                    front = raer = 0

                    enQueue('A')
                    enQueue('B')
                    enQueue('C')
                    print(deQueue())
                    print(deQueue())
                    print(deQueue())                    
파이썬 리스트 특성을 사용한 Queue
    - 리스트는 크기를 동적으로 변경할 수 있음
    - 메모리 절약
    - 삽입, 삭제 시 복사, 데이터를 이동시키는 연산을 수행하는 데 많은 시간 소요
    
    - 리스트의 메서드
        - append(item): 마지막 위치에 원소 추가
        - pop(index): index 위치에 원소 삭제
    - fron는 리스트의 맨 앞: -1
    - rear는 리스트의 맨 뒤: len(queue)-1
        - 따라서 front,rear변수를 따로 관리할 필요가 없음
    
    - 파이썬의 리스트 특성을 사용한 원형 큐의 삽입 및 삭제 함수
                def enQueue(item): # 삽입 연산
                    queue.append(item)
                def deQueue(): # 삭제 연산
                    if isEmpty():
                        print('Queue_Empty')
                    else:
                        return queue.pop(0)
                def isEmpty():
                        return len(queue) == 0
                def Qpeek():
                    if isEmpty():
                        print('Queue_Empty')
                    else:
                        return queue[0]
                ## 본문
                #front : -1
                #rear: len(queue)-1

                enQueue('A')
                enQueue('B')
                enQueue('C')
                print(deQueue())
                print(deQueue())
                print(deQueue())

연결 Queue
    - 연결 큐의 특징
        - 선형 큐와 원형 큐의 단점을 개선
        - 단순 연결 리스트(Linked List)를 이용한 큐
            - 큐의 원소: 단순 연결 리스트의 노드
            - 큐의 원소순서: 노드의 연결 순서, 링크로 연결되어 있음
            - front: 첫 번째 노드를 가리키는 링크
            - rear: 마지막 노드를 가리키는 링크
        - 상태 표현
            - 초기상태: front = rear = None
            - 공백상태: front = rear = None
    - 연결 큐의 구현
        - createLinkedQueue(): 초기 공백 큐 생성
            - 리스트 노드 없이 포인터 변수만 생성함
            - front, rear = None으로 초기화
        - isEmpty(): 공백상태 검사
            - 공백상태: front = rear = None
                def isEmpty():
                    return front == None
        - enQueue(item): 삽입
            - 새로운 노드 생성 후 데이터 필드(속성)에 item 저장
            - 연결 큐가 공백인 경우와 아닌 경우로 구분하여, front, rear 변수 지정
                def enQueue(item):
                    global front, rear
                    newNode = Node(item) # 새로운 노드 생성
                    if isEmpty(): #큐가 비어있다면
                        front = newNode
                    else:
                        rear.next = newNode
                    rear = newNode  
        - deQueue(): 삭제
            - old가 지울 노드를 가리키게 하고, front 재설정
            - 삭제 후 공백 큐가 되는 경우, rear도 None으로 설정
            - old가 가리키는 노드를 삭제하고 메모리 반환
                def deQueue(): 
                    global front, rear
                    if isEmpty(): 
                        print('Queue_Empty')
                        return None
                    item =  front.item 
                    front = front.next 
                    if isEmpty():
                        rear = None
                    return item    # item만 반환할 것이 아니라 front.item이었던 노드의 다음 노드를 None으로 만들어 주어야 하지 않나??
        - 파이썬으로 구현한 연결 큐
            class Node:
                def __init__(self,item,n=None):
                    self.item = item
                    self.next = n
            def enQueue(item):
                global front,rear
                newNode = Node(item)
                if front == None:
                    front = newNode
                else:
                    rear.next = newNode
                rear = newNode
            def isEmpty:
                return front == None
            def deQueue():
                global front,rear
                if isEmpty():
                    print('Queue_Empty')
                    return None
                item = front.item
                front = front.next
                if front == None:
                    rear = None
                return item
            def Qpeer():
                return front.item
            defr printQ():
                f = front
                S = ''
                while f:
                    s += f.item + ''
                    f = f.next
                return S
        
            # 본문
            front = None
            rear = None

            enQueue('A')
            enQueue('B')
            enQueue('C')
            print(Q)
            print(deQueue())
            print(deQueue())
            print(deQueue())
큐 라이브러리
    - 큐 모듈
        - 큐 모듈에 정의 된 클래스
            - queue.Queue(maxsize): 선입선출(FIFO) 큐 객체를 생성
            - queue.LifoQueu(maxsize): stack개념의 후입선출(LIFO) 큐 객체를 생성
            - queue.PriorityQueue(maxsize): 우선순위 큐 객체를 생성
                - 입력되는 아이템의 형식은 (순위,아이템)의 튜플로 입력되며, 우선순위는 숫자가 작을수록 높은 순위를 가짐
        - maxsize는 최대 아이템 수, 지정하지 않거나 음수이면 내용만큼 늘어남
        - 제시된 3개의 클래스는 아래의 메서드를 공통으로 가짐
            - qsize(): 큐 객체에 입력된 아이템의 개수를 반환
            - put(item[, block[,timeout]]): 큐 객체에 아이템을 입력
            - get([block[,timeout]]): 생성된 큐 객체 특성에 맞추어 아이템 1개를 반환
            - empty(): 큐 객체가 비어있으면 True 리턴
            - full(): 큐 객체가 꽉차있으면 True 리턴
        - 클래스의 정렬방식에 따라 get 계열의 메서드 결과가 달라짐