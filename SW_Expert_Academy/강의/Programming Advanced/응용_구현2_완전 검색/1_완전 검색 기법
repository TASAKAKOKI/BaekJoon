Baby-Gin 게임
    0-9사이의 숫자 카드에서 임의의 카드 6장을 뽑는 게임 중
        - 3장의 카드가 연속적인 번호를 갖는 경우: Run(런)
        - 3장의 카드가 동일한 번호를 갖는 경우: Triplete(트리플릿)
        ==> 6장의 카드가 Run 또는 Triplete으로만 구성된 경우를 Baby-Gin이라고 함

    ex) 667767의 경우 두개의 Triplete(666,777)이므로, Baby-Gin임.
        054060의 경우, 한 개의 Run(456)과 한 개의 Triplete(000)이 있으므로, Baby-Gin임.
        101123의 경우, 123의 Run이 한 개 있지만, 나머지 숫자가 Run이나 Triplete을 만족하지 않으며, 111의 Triplete으로 접근해도, 나머지 숫자가 만족하지 않으므로 Baby-Gin이 아니다.

    ==> 6자리의 숫자를 입력 받아 Baby-Gin여부를 판단하는 알고리즘을 작성하는 방법이 있을까? 

완전검색기법
    - 문제의 해(solution)을 얻기 위해 가능한 모든 경우들을 모두 나열해 보고 확인하는 기법
        -고지식한 방법(Brute-force),생성 및 테스트(Generate and test)
        -Brute force의 force의 의미는 사람(지능)보다는 컴퓨터의 힘(force,계산능력)을 의미
    - 문제를 해결하기 위한 간단하고 쉬운 접근법
        -상대적으로 빠른 시간에 문제 해결(알고리즘 설계)가능
    - 대부분의 문제에 적용 가능
    - 문제에 포함된 자료(요소,인스턴스)의 크기가 작을 경우 유용(즉, 검색해 봐야 할 가능한 모든 경우의 수가 적은 경우)

    고지식한 검색(순차 검색,Sequential Search)
        - 자료들의 리스트에서 키 값을 찾기 위해 첫 번째 자료부터 비교하면서 진행
        - 결과
            탐색 성공/탐색 실패
            ex) def sequentialSearch(a,n,key):
                    i=0
                    while i < n and a[i] !=key:
                        i += 1
                    if i <n return i #성공
                    else: return -1 #실패
        - 순차 검색에서 리스트에 키 값이 존재하지 않는다는 것을 확신하기 위해서는 모든 자료들에 대해 키 값과 비교 작업을 수행해야 함.

완전검색으로 시작하기
    - 문제해결을 위한 가장 단순한 방법이기 때문에 문제의 크기가 커지면 시간 복잡도가 매우 크게 증가.
    - 모든 경우의 수를 생성하고 테스트하기 때문에 수행 속도는 느리지만, 해답을 찾아내지 못할 확률이 적음
    - 따라서, 완전검색을 통해 입력의 크기를 작게 해서 빠르게 답을 구하는 알고리즘 설계를 우선 한다.
    - 이후, 그리디(탐욕)기법이나 동적 계획법을 이용해서 효율적인 알고리즘을 찾는다.
    - 완전검색알고리즘은 학술적 또는 교육적 목적을 위해 알고리즘의 효율성을 판단하기 위한 척도로 사용되곤 함.
    - 검정 등에서 주어진 문제를 풀 경우, 좋은 해결법이 생각나지 않은 경우,
    - 1 먼저 완전검색으로 접근
    - 2 성능 개선(시간복잡도 감축, 수행 속도 향상 등)을 위해 다른 알고리즘 모색
    - 3 해답 확인하기
완전검색을 통한 Baby-Gin 접근
    - 고려할 수 있는 모든 경우의 수 생성하기
    - 앞의 세자리와 뒤의 세자리를 잘라서, Run과 Triplete 여부를 판단하기.
    ==> 완전검색은 모든 경우를 나열하는 과정에서 중복된 경우들을 생성할 수도 있음.
    --> 중복을 제거할 수 있다면 계산 시간 단축 가능