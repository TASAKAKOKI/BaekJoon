알고리즘
    : 유한한 단계를 통해 문제를 해결하기 위한 절차나 방법
    : 주로 컴퓨터 용어로 쓰이며, 컴퓨터가 어떤 일을 수행하기 위한 단계적 방법
    : 어떠한 문제를 해결하기 위한 절차
    ex) 1부터 100까지의 합을 구하는 경우
        방법1: 1+2+3+....100 =5010
        방법2: (1+100)+(2+99)+...= 101*50 = 5010
    
알고리즘 효율
    :같은 문제에 대한 다른 알고리즘들이 구현되어 컴퓨터에서 실행되는 경우
    :입력의 크기가 커질 수록, 알고리즘의 효율에 따라 실생시간의 차이 발생
        알고리즘 설계 -> 실행에 필요한 자원 분석 -> 효율성 제시
        공간적 효율성: 얼마나 많은 메모리 공간을 요하는가?
        시간적 효율성: 얼마나 많은 시간을 요하는가?
        효율성의 반대의미: 복잡성
    알고리즘의 효율성을 나타내는 것 : 시간복잡도
    시간적 복잡도 분석
        - 하드웨어 환경에 따라 처리시간이 달라짐
            -부동 소수 처리 프로세서 존재 유무, 나눗셈 가속 기능 유무 등
            -입출력 장비의 성능, 공유 여부
        - 소프트웨어 환경에 따라 처리시간이 달라짐
            -프로그램 언어의 종류
            -운영체제, 컴파일러의 종류 등
        -환경적 차이로 인해 분석이 어려움
        따라서, 알고리즘의 효율성은 입력의 크기가 커질수록 문제가 됨.
    
알고리즘 복잡도: 점근적 표기
    시간(또는 공간) 복잡도의 점근적 표기
        -입력 크기에 대한 함수로 표기
            함수는 다항식
        -단순한 함수로 표현하기 위해 점근적표기(Asymptotic Notation)사용

        입력 크기n이 무한대로 커질 때의 복잡도를 간단히 표현하기 위해 사용하는 표기법
    종류: O표기(빅오),빅오메가 표기, 쎄타 표기 등이 있음

    Big-O 표기: 점근적 상한
        다항식의 최고차항만 계수없이 취함.
        최악의 경우 걸리는 실행시간을 의미
    Big-Omega 표기: 점근적 하한
        다항식의 최고차항만 계수없이 취함.
        최소 실행시간을 의미
    Theta 표기: Big-O표기와 Big-Omega표기가 같은 경우에 사용

효율적 알고리즘의 필요성
    - 10억개의 숫자를 정렬하는데 PC에서 O(n^2)알고리즘은 300여년 슈퍼컴에서조차 1주일이 걸리는 반면, O(nlogn)알고리즘으로 해결하면 슈퍼컴으로는 1초이내, PC에서도 5분 이내에 정렬이 가능함.
    - 즉, 효율적인 알고리즘은 슈퍼컴퓨터보다 더 큰 가치가 있음
    - 값 비싼 H/W의 기술 개발보다 효율적인 알고리즘 개발이 더 경제적이다.