비트연산자: 다른 연산자들에 비해 실행시간이 적게 소요됨
    -프로그래밍 언어에서 지원하는 비트 연산자들
    &   비트 단위로 AND연산을 한다. 둘다 1인 경우 1을 반환, 나머지는 0 반환
    |   비트 단위로 OR연산을 한다. 둘다 0인 경우 0을 반환, 나머지는 1 반환
    ^   비트 단위로 XOR연산을 한다. 두 비교 비트가 서로 같으면 0 다르면 1 반환
    ~   단항 연산자로서 피연산자의 모든 비트를 반전시킨다.
    <<  피연산자의 비트 열을 왼쪽으로 이동시킨다.       1<<n : 2^n의 값을 가짐
    >>  피연산자의 비트 열을 오른쪽으로 이동시킨다.

    - 비트연산 적용 시 연산 속도를 향상시키거나 메모리 절약 가능
        ex)변수에 저장된 양의 정수 값의 홀수, 짝수를 판별 할 경우,
            방법1: 모듈러 연산자 이용(N%2)
            방법2: 비트단위 AND(&)연산 이용, 마지막 비트값이 1인지 0인지 보고 판단 (N&1)
        ex) 1<<n: 2^n의 값을 가짐
                - 원소가 n개일 경우 모든 부분집합의 수를 의미
                - Power set(모든 부분 집합)
                    -공집합과 자기 자신을 포함한 모든 부분집합
                    -각 원소가 포함되거나 포함되지 않는 2가지 경우의 수를 계산하면 모든 부분집합의 수가 계산되
        ex) i&(i<<j): 계산 결과는 i의 j번째 비트가 1인지 아닌지를 의미
                             7 6 5 4 3 2 1 0
                    i        0 1 0 0 1 0 1 0  2^6 + 2^3 +2 ^1
                    1<<6     0 1 0 0 0 0 0 0  2^6
                    i&(1<<6) 0 1 0 0 0 0 0 0  2^6
비트 연산 예제
    비트 연산1:특정 위치에 비트값을 확인하는 수식에 대한 예제
        def BitPrint(i):
            for j in range(7,-1,-1):
                print('1' if(i&(1<<j)) else '0', end='')
                #또는 print("%d"%((i>>j)&1), end='')
        for i in rnage(-5,6):
            print("%2d="%i,end='') #십진수 출력
            BitPrint(i) #이진수 출력
            print()
        ==> BitPrint함수: 팔비트의 문자형 변수에 저장된 비트값들을 출력하는 함수
    비트 연산2: 4바이트 크기의 인트형 변수에 저장된 값들을 한 바이트씩 읽어서 비트 형태로 출력하는 예제
        a = 0x10
        x = 0x01020304
        print("%d"%a,end="")
        BitPrint(a)
        print()
        print("%08x="%x,end='')
        for i in range(0,25,8):
            BitPrint(x>>i)
            print(end='')
    엔디안:
        컴퓨터의 메모리와 같은 1차원의 공간에 여러 개의 연속된 대상을 배열하는 방법을 의미하며, HW아키텍처마다 다름
        주의사항:
            -속도 향상을 위해 바이트 단위와 워드 단위를 변환하여 연산할 때 올바로 이해하지 않으면 오류를 발생시킬 수 있음
